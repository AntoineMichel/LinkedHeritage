
== Know limitations ==

* Import CSV files with tab separated and fields delimited by double quote char (").

* Only english, french and dutch are supported.
** Import provide the list of all existing language, they will be all supported soon.
** Please select at least one of the 3 supported language, because the limitation is on the graph rendering, and if you don't select one of the 3, you can't visualise your graph.

* Can only import "flat" csv file for now

* Visualisation of existing mapping : mapping done are saved on the server but not displayed when redraw (bug solve soon).

* Color and global look of the website and elements.

* integrity check for data filled during the import are not done. Please be carefull : 
** of selecting unique and non null [title,creator] couple during the "information" step of the import
** of selecting a value for all fields when you want to map a column. If you don't want to map one, don't change any drop down list.


== Know functionnalities ==

* Map yourself your "flat" CSV export files to a SKOS thesaurus. 
** A convenient and easy user interface allow you to define transformations rules to get your "flat" CSV export a nice SKOS Thesaurus

* Graph display and modification features :
** That's really the focus of this alpha realease : provide a proof of concept for an easy way to create / modify and manage a thesaurus. During this dev cycle, many things were validated, and result is good for a first shot. Rest many rooms of improvment, but that's a good way, and many more comes in near future.
** So, what you can do is : 
*** Display your thesaurus in the language you want : click on the flag, and select your prefered language.
*** Reorgenise your thesarus with drag and drop : override a term, you see a "local tool bar appearing


== Futures fonctionnalities ==

* improved import : 
** import any CSV configuration (tab, space, comma,... delimiter)
** direct import of SKOS RDF file in n3,xml,turtle format
** import of "nested" CSV files
** import of your specific CSV files (please provide them as example !)


* Ontology history management : 
** Actually - not showed on the UI - each modification is save and store in an history ontology file.
** This done under the hood, but future will give the user access to it and allow him : 
*** To see modifications done by others
*** Revert modifications 
*** Create new versions of the thesaurus from a set of modification.
** Another good of this history management is that just the modification done is send to the server.
*** So, it's fast, and if the server send modifications to others connected users... many users can colaboratively edit a thesaurus and see changes in "real time".
*** Great feature no ? Comming soon ! :) 

* Mapping management :
** Visual meaning of links you can create many types of links... each type will have a specific design
** Link filtering : display only links you are interested in ! 

== For alpha 0.0.1 ==

* define and create the js workflow for getting the history file
** the pb is related to the fact to only get "metadata" of the graph... because server side don't manage changes order

* loading gadget during thesaurus loading
* clean screen top : debug messages
* create real tool bar : add graph selection and lang selection
* activate the information panel

* import rdf/xml
* create from scratch

* simplification of the form : only name, organisation name, and languages

* manage language creation : on the first questionnaire and on the import

* filtering graph mapping when request the second graph (server side modifications)

integration into stanbol pages

create graph from scratch

improve local toolbox display
cleaning old code

* solve bug about uncolorization of words

* load functionnality : display a load object when needed

* check integrity of mapping : 
** verify the check and allow modifications when mapping is not ok :
** checking done by import/lh.import.js/addSubmitEvent();

* graph visualisation
** add a color (and a tooltip) to "--undefined--" nodes

* create a download with all languages and flag for a nice drop down

* vérifier la fréquence de création des ontohisto, car il semble qu'il s'en crée trop

* apparement la modification de concepts lorsque 2 graph sont affichés ne fonctionne pas en direct live...

== Bug existing graph loading ==

* use branch existing-graph-loading

* l'activation du code commenté dans 	function displayGraphLink(gr){
** "corrupt" les index des datas et le graph ne peut plus se mettre à jour
** le mieux serait d'utiliser les datas sous forme de triples et les indexes par les subjects

= tester la différence entre le select et le databank

= voir le résultat d'un sélect avec un contruct

= voir quelle possibilité pour définir le data comme le triple
==> rewrite de la fonction "children" avec a.s = b.o


== Project organisation ==*

* mouve all css, images and js into the global "resources" folder.

== Create graph from scratch ==

* for creating a graph from nothing : 
** displayGraph(graphTwo,{"@subject" : []});

== Visualisation ==


adding properties
add mouse rool event to deal with scrollbar
display properties of link with text along link
manage links displays for link in the same graph

== Thesaurus adding process ==

* allow a "create from scratch process"

* allow upload of "nested csv"

== Form ==

=== Metadata informations ===
* voir avec hugo pour les champs du formulaire ? quels champs obligatoires ?

* language : faire de la multi-selection

===  CSV import ===

* create a nice CSS for drop down list (look at rd-intranet)

* better integration of the configuration zone with the rest of the tab

* do ckeck for well filled configuration before import

* tutorial on CSV export from excel : 
** take care of encoding issues.

== After import ==

* for answer after skosification
returns 201 created with Location header pointing to the job (say
/jobs/1234) and HTML content that contains <a rel="job"
href="/jobs/1234"> (or JSON equivalent if that's useful)


* URLencode all informations used to create the thesaurus and concept uri


== Javascript ==


* use "real" triple implementation : like this : https://github.com/IKS/rdfQuery [1]
** the main issue here is that this implementation don't accept json-ld (turtle and json are okay)
** but this one https://github.com/digitalbazaar/jsonld.js is a js implementation of json-ld
*** but really lack of documentation and don't see for now how to get triples from here.

[1] the main interresting part is : http://code.google.com/p/rdfquery/wiki/RdfPlugin
Note : the git repository is a mirror of this google code, seem to be updated from git to gcode

* get serialisation
** The dump() method can take an options argument which is an object with the following properties:
** format: the format of the dump as a mime type. Possible values are 'application/json' (the default) and 'application/rdf+xml'.
    namespaces: an object defining the namespace bindings that will be used in the dump. This is only relevant for XML-based formats. The prefix rdf is always bound to the RDF syntax namespace. 
** For XML-based formats, the dump() method actually returns a DOM document rather than a string. 

==== bug in rdfqueyr ====

* rdf is normally a reserved curie (find this in doc).
** create triple with rdf:type cause error curi if rdf ns not defined :
** ex : 
///RDF management
		var hns = {
			    namespaces: { h: 'http://www.culture-terminology.org/ontoHisto/',
			    }
		  };

var changeSubject = $.rdf.resource("<urn:change-DO-DYN-ID>");
		var rdfChanges = $.rdf.databank([
		                '<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .',
		                '<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .'
		              ], 
		              { base: 'http://www.example.org/',
		                namespaces: { 
		                  dc: 'http://purl.org/dc/elements/1.1/', 
		                  foaf: 'http://xmlns.com/foaf/0.1/' } });
		
		rdfChanges.add($.rdf.triple(changeSubject,"rdf:type","h:change",hns));

* and if rdf defined in namespace, non valid rdf file is generated : 
///RDF management
		var hns = {
			    namespaces: { h: 'http://www.culture-terminology.org/ontoHisto/',
			    	rdf:"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			    }
		  };

var changeSubject = $.rdf.resource("<urn:change-DO-DYN-ID>");
		var rdfChanges = $.rdf.databank([
		                '<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .',
		                '<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .'
		              ], 
		              { base: 'http://www.example.org/',
		                namespaces: { 
		                  dc: 'http://purl.org/dc/elements/1.1/', 
		                  foaf: 'http://xmlns.com/foaf/0.1/' } });
		
		rdfChanges.add($.rdf.triple(changeSubject,"rdf:type","h:change",hns));


=== Vie.js ===
* about vie.js
** document for 1.0.0 : http://viejs.org/docs/1.0.0/
** website http://viejs.org
** deals with rdfa in html page, don't put rda in page.
